# MINDS-i-Debugger
Code to assist with debugging MINDSi robots

This library contains code for providing logging and debugging msgs on a dedicated serial link.

## Usage

### Sending Messages

In the main program file include the required debugger headers.

``` cpp
#include <MINDSiDebugger.h>
#include <DebugMsgs.h>
#include <Util.h>
```

Create a debugger instance

``` cpp
#ifdef M_DEBUG
  #include "MINDSiDebugger.h"
  MINDSiDebugger debugger;
#endif
```

Create a message and send it anywhere you want to send a message (sending messages in fast running loops can slow down the loop and hinder performance)


``` cpp
#ifdef M_DEBUG
	// Logger Msg
	RawPositionMsg_t msg;
	GPS_ANGLE loc_lat = location.angLatitude();
	GPS_ANGLE loc_lon = location.angLongitude();
	msg.latitude.minutes = loc_lat.minutes;
	msg.latitude.frac = loc_lat.frac;
	msg.longitude.minutes = loc_lon.minutes;
	msg.longitude.frac = loc_lon.frac;
	msg.altitude = 0.0;
	debugger.send(msg);
#endif
```

### Receiving Messages

Receive messages by running the reader (specifying port and output file). Optionally, a live view of the robot can be viewed by secifying the live plotter flag (see the usage output)

```
./scripts/reader.py -h
```

## Creating/Modifying Debug Messages

The debug messages are auto generated using the message generation script. Editing the [debug_msgs.yaml](./msg_generation/debug_msgs.yaml) file and re-running the message generation script will allow you to create and modify debug messages.

### YAML configuration file

All debug messages are described in the follwing way:

#### Built In Types

These are the native types and sizes and associated with the target platform

``` yaml
{% for built_in_type, size in built_in_types.items() %}
'{{ built_in_type }}': {{ size }}
{% endfor %}
```

#### Custom Types

These the custom types that messages can use to describe more complicated fields

``` yaml
<custom_type_name>:
    # list of fields
    - name: <field_name>
        struct_type: <struct_type> # can be custom type or built in type
        cast_type: <cast_type> # optional - built in integer type to cast the value to before sending (needed for float struct types)
        mod_factor: <value> # optional - value to scale the field by before casting to <cast_type>
        mod_offset: <value> # optional - value to add to the field (occurs before <mod_factor> if specified) before casting to <cast_type>
        description: <string> # optional - description of the field for this README
```

#### Debug Messages

These are debug messages that can be sent from the platform

``` yaml
  - name: <debug_msg_name>:
    id: <hex_msg_id> # a unique (checked at generation time) hex identifier
    description: '<string>' # description of the message for this README
    fields:
      # list of fields
      - name: <field_name>
        struct_type: <struct_type> # can be custom type or built in type
        cast_type: <cast_type> # optional - built in integer type to cast the value to before sending (needed for float struct types)
        mod_factor: <value> # optional - value to scale the field by before casting to <cast_type>
        mod_offset: <value> # optional - value to add to the field (occurs before <mod_factor> if specified) before casting to <cast_type>
            interpret: # optional - usually used for custom types
                type: <python_type> # type hint for the python reader to display the message field
                func: <func> # function to create a value from this type (custom functions can be defined in the template for data_decoder.py)
        num_format: <string> # optional - python f string format string to format the field (usually to specify digits or alignment)
        description: <string> # optional - description of the field for this README
```

### Generating the debug messages

Run the message generation script once you've edited the configuration file. By default a stamped message will be created for each message type, but this can be disabled (see the usage output)

```
./msg_generation/generate_debug_msgs.py -h
```

## Packet Structure

| Header_1 | Header_2 | Length | Type | Message-dependent | Checksum_1 | Checksum_2 | 
| ------------ | ------------- | ------------ | ------------- | ------------ | ------------- | ------------ |
| 0x51 | 0xAC | len | id | data_bytes.. | cs_1 | cs_2 |

## Checksum Calculation

Checksums are calculated over the bytes following the length field (see "Packet Structure") up to but not including the checksum fields. 

The checksum can be calculated using the following pseudo code:

``` js
const uint16_t crctable[256] =
{
    0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF,
    0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7,
    0x0919, 0x1890, 0x2A0B, 0x3B82, 0x4F3D, 0x5EB4, 0x6C2F, 0x7DA6,
    0x8551, 0x94D8, 0xA643, 0xB7CA, 0xC375, 0xD2FC, 0xE067, 0xF1EE,
    0x1232, 0x03BB, 0x3120, 0x20A9, 0x5416, 0x459F, 0x7704, 0x668D,
    0x9E7A, 0x8FF3, 0xBD68, 0xACE1, 0xD85E, 0xC9D7, 0xFB4C, 0xEAC5,
    0x1B2B, 0x0AA2, 0x3839, 0x29B0, 0x5D0F, 0x4C86, 0x7E1D, 0x6F94,
    0x9763, 0x86EA, 0xB471, 0xA5F8, 0xD147, 0xC0CE, 0xF255, 0xE3DC,
    0x2464, 0x35ED, 0x0776, 0x16FF, 0x6240, 0x73C9, 0x4152, 0x50DB,
    0xA82C, 0xB9A5, 0x8B3E, 0x9AB7, 0xEE08, 0xFF81, 0xCD1A, 0xDC93,
    0x2D7D, 0x3CF4, 0x0E6F, 0x1FE6, 0x6B59, 0x7AD0, 0x484B, 0x59C2,
    0xA135, 0xB0BC, 0x8227, 0x93AE, 0xE711, 0xF698, 0xC403, 0xD58A,
    0x3656, 0x27DF, 0x1544, 0x04CD, 0x7072, 0x61FB, 0x5360, 0x42E9,
    0xBA1E, 0xAB97, 0x990C, 0x8885, 0xFC3A, 0xEDB3, 0xDF28, 0xCEA1,
    0x3F4F, 0x2EC6, 0x1C5D, 0x0DD4, 0x796B, 0x68E2, 0x5A79, 0x4BF0,
    0xB307, 0xA28E, 0x9015, 0x819C, 0xF523, 0xE4AA, 0xD631, 0xC7B8,
    0x48C8, 0x5941, 0x6BDA, 0x7A53, 0x0EEC, 0x1F65, 0x2DFE, 0x3C77,
    0xC480, 0xD509, 0xE792, 0xF61B, 0x82A4, 0x932D, 0xA1B6, 0xB03F,
    0x41D1, 0x5058, 0x62C3, 0x734A, 0x07F5, 0x167C, 0x24E7, 0x356E,
    0xCD99, 0xDC10, 0xEE8B, 0xFF02, 0x8BBD, 0x9A34, 0xA8AF, 0xB926,
    0x5AFA, 0x4B73, 0x79E8, 0x6861, 0x1CDE, 0x0D57, 0x3FCC, 0x2E45,
    0xD6B2, 0xC73B, 0xF5A0, 0xE429, 0x9096, 0x811F, 0xB384, 0xA20D,
    0x53E3, 0x426A, 0x70F1, 0x6178, 0x15C7, 0x044E, 0x36D5, 0x275C,
    0xDFAB, 0xCE22, 0xFCB9, 0xED30, 0x998F, 0x8806, 0xBA9D, 0xAB14,
    0x6CAC, 0x7D25, 0x4FBE, 0x5E37, 0x2A88, 0x3B01, 0x099A, 0x1813,
    0xE0E4, 0xF16D, 0xC3F6, 0xD27F, 0xA6C0, 0xB749, 0x85D2, 0x945B,
    0x65B5, 0x743C, 0x46A7, 0x572E, 0x2391, 0x3218, 0x0083, 0x110A,
    0xE9FD, 0xF874, 0xCAEF, 0xDB66, 0xAFD9, 0xBE50, 0x8CCB, 0x9D42,
    0x7E9E, 0x6F17, 0x5D8C, 0x4C05, 0x38BA, 0x2933, 0x1BA8, 0x0A21,
    0xF2D6, 0xE35F, 0xD1C4, 0xC04D, 0xB4F2, 0xA57B, 0x97E0, 0x8669,
    0x7787, 0x660E, 0x5495, 0x451C, 0x31A3, 0x202A, 0x12B1, 0x0338,
    0xFBCF, 0xEA46, 0xD8DD, 0xC954, 0xBDEB, 0xAC62, 0x9EF9, 0x8F70
};

crc = 0x0001

for ( each byteValue between length and checksum fields)
{
 	crc = (crc << 8) ^ crctable[((crc >> 8) ^ byteValue)];
}
```

## Message Types

List of available message types.

| Type ID | Name | 
| ------------ | ------------- |
{% for debug_msg in debug_msgs %}
| {{debug_msg['id']}} | {{ debug_msg['name']|to_camel_case(first=True) }}Msg_t |
{% endfor %}
| 0x90 | AsciiMsg_t |

## Custom Data Types

``` cpp
{% for custom_type_name, fields in custom_types.items() %}
typedef struct {
    {% for field in fields %}
    {{ field['struct_type'] }} {{ field['name']|to_camel_case(first=False) }};
    {% endfor %}
} {{ custom_type_name }};

{% endfor -%}

typedef struct {
    char data[256];
    uint8_t len;
} LenString_t;
```

## Message Definitions

{% for debug_msg in debug_msgs %}
#### {{ debug_msg['name']|to_camel_case(first=True) }} Message ({{ debug_msg['id'] }})

{{ debug_msg['description'] }}

``` cpp
typedef struct {
    {% for field in debug_msg['fields'] %}
    {{ field['struct_type'] }} {{ field['name']|to_camel_case(first=False) }};
    {% endfor %}
} {{ debug_msg['name']|to_camel_case(first=True) }}Msg_t;
```

| Byte Offset | Name | Range | Resolution | Description |
| ------------ | ------------- | ------------- | ------------- | ------------- |
	{% set start_idx = namespace(value=4) %}
    {% for field in debug_msg['fields'] %}
		{% for field_name, field_size, field_min, field_max, field_resolution, field_description in field|get_field_description %}
| {{ start_idx.value }}{% if field_size > 1 %}-{{ start_idx.value + field_size - 1 }}{% endif %} | {{ field_name }} | {{ field_min }}..{{ field_max }} | {{ field_resolution }} | {{ field_description }} |
			{% set start_idx.value = start_idx.value + field_size %}
		{% endfor %}
    {% endfor %}

{% endfor %}

#### Ascii Message (0x90)

A method for sending ASCII messages. These should only be used for active debugging and should be removed before committing to the repository.

``` cpp
typedef struct {
	LenString_t ascii
} AsciiMsg_t;
```

| Byte Offset | Name | Description | 
| ------------ | ------------- | ------------- |
| 4-? | LenString_t | Struct of ASCII characters for temporary debugging msgs |

Example:
``` cpp
#ifdef M_DEBUG
	AsciiMsg_t msg;
	String tst = "ASCII MSG Here";
	msg.ascii.len = tst.length();
	tst.toCharArray(msg.ascii.data, tst.length() + 1);
	debugger.send(msg);
#endif
```