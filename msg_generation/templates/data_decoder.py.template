# This file was auto-generated. Any changes to this file may be overwritten.

from collections import namedtuple
from struct import pack, unpack

{% for debug_msg in debug_msgs %}
{{ debug_msg['name']|to_camel_case(first=True) }} = namedtuple('{{ debug_msg['name']|to_camel_case(first=True) }}',
    {% for field in debug_msg['fields'] %}
    {%+ if loop.index == 1 %}[{% else %} {% endif %}'{{ field['name'] }}'{% if loop.index == loop.length %}]){% else %},{% endif +%}
    {% endfor %}

{% endfor %}
Ascii = namedtuple('Ascii', ['ascii'])

def gps_angle_to_float(min, frac):
    deg = min / 60.0
    min_deg = (min - (deg * 60.0) + frac) / 60.0
    return deg + min_deg;        

def ms_to_s(ms):
    return ms / 1000.0

class DataDecoder:
    def __init__(self, outfile):
        self.outfile = outfile
        
    def decode_data(self, data, msg_id, pkt_len):
{% for debug_msg in debug_msgs %}
        {%+ if loop.index == 1%}if{% else %}elif{% endif %} msg_id == int('{{ debug_msg['id'] }}', 16): # {{ debug_msg['name']|to_camel_case(first=True) }}Msg_t
    {% set cur_idx = namespace(value=0) %}
    {% for field in debug_msg['fields'] %}
        {% for base_field in field|get_base_types %}
    {% set unpack_str, pack_str, type_size = base_field.get('cast_type', base_field['struct_type'])|get_struct_format %}
            {{ base_field['name'] }} = unpack('{{ unpack_str }}', pack('{{ pack_str }}'{% for data_idx in range(cur_idx.value, cur_idx.value + type_size) %}, data[{{ data_idx }}]{% endfor %}))[0]{% if 'mod_factor' in base_field%} / {{ base_field['mod_factor']}}{% endif %}{% if 'mod_offset' in base_field %} - {{ base_field['mod_offset'] }}{% endif +%}
        {% set cur_idx.value = cur_idx.value + type_size %}
        {% endfor %}
    {% endfor %}
            print(
                f"{{ debug_msg['name']|to_camel_case(first=True) }}"\
    {% for field in debug_msg['fields'] %}
                f" {{ field['name'] }} = {{ field|get_print_format|join('') }}{% if loop.index == loop.length %}"){% else %}"\{% endif +%}
    {% endfor %}
            self.outfile.write(
                f"{{ '{msg_id:d}:' }}"\
    {% for field in debug_msg['fields'] %}
                f"{{ field|get_print_format|join(':') }}{% if loop.index == loop.length %}\n"){% else %}"\{% endif +%}
    {% endfor %}
            return ('{{ debug_msg['name']|to_camel_case(first=True) }}',
                    {{ debug_msg['name']|to_camel_case(first=True) }}(
    {% for field in debug_msg['fields'] %}
                        {{ field|get_interpreted_value|list|join(',\n') }}{% if loop.index == loop.length %})){% else %},{% endif +%}
    {% endfor %}
{% endfor %}
        elif msg_id == int('0x90',16): # AsciiMsg_t
            ascii = data[:pkt_len - 3]
            print('Ascii: {0!s}'.format(ascii.decode()))
            self.outfile.write("{:d}:{!s}\n".format(msg_id, ascii.decode()))
            return ('Ascii', Ascii(ascii))
        else:
            print(f"Unknown Msg type recieved: {msg_id:d}")
        
        self.outfile.flush()